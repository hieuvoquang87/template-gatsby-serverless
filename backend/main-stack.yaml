---
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda

Parameters:
  Environment:
    Type: String
    Default: dev
  BranchIdentifier:
    Type: String
    Default: develop
  DomainName:
    Type: String
    Default: hieuqvo.com
  DomainCertificateArn:
    Type: AWS::SSM::Parameter::Value<String>
    Default: /cert/com-hieuqvo

Mappings:
  RegionMap:
    us-east-1:
      Short: use1
    us-west-2:
      Short: usw2

Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${BranchIdentifier}-CoreServiceLambdaRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*

  CoreServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./core-service
      Handler: lambda.handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Tracing: Active
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionBody:
        !Transform { "Name": 'AWS::Include', "Parameters": { "Location": './main-stack-api.yaml' } }
      StageName: Prod
      OpenApiVersion: '3.0.0'
      Variables:
        CoreServiceFunctionName: !Ref CoreServiceFunction

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CoreServiceFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayApi}/*/*

  ApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref DomainCertificateArn
      DomainName: !Sub
        - ${RegionShort}-${BranchIdentifier}-test.${DomainName}
        - RegionShort: !FindInMap [RegionMap, !Ref "AWS::Region", Short]
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
      - ApiGatewayApiProdStage
    Properties:
      DomainName: !Ref ApiDomainName
      RestApiId: !Ref ApiGatewayApi
      Stage: Prod

  ApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Comment: DNS name for stack ${AWS::StackName}.
      Name: !Ref ApiDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainName.RegionalHostedZoneId

Outputs:
  LambdaFunctionArn:
    Description: Function Arn
    Value: !GetAtt CoreServiceFunction.Arn

  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${CoreServiceFunction}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#/apis/${ApiGatewayApi}/stages/prod

  ApiUrl:
    Description: Invoke URL for your API.
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
