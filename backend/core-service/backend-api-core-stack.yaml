---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda

Parameters:
  Environment:
    Type: String
    Default: dev
  BranchIdentifier:
    Type: String
    Default: develop
  # DomainName:
  #   Type: String
  #   Default: api.dentaldate.com
  # DomainCertificateArn:
  #   Type: AWS::SSM::Parameter::Value<String>
  #   Default: /honoru/wildcard-cert
  # DbDatabase:
  #   Type: String
  # DbHost:
  #   Type: String
  # DbPass:
  #   Type: String
  # DbUser:
  #   Type: String

Mappings:
  RegionMap:
    us-east-1:
      Short: use1
    us-west-2:
      Short: usw2

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./simple-proxy-api.yaml
      StageName: Prod
      Variables:
        LambdaFunctionName: !Ref CoreServiceApi

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub HonorU-LambdaRole-${BranchIdentifier}
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AWSXrayWriteOnlyAccess
        - arn:aws:iam::aws:policy/AmazonDynamoDBReadOnlyAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  LambdaApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt CoreServiceApi.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ApiGatewayApi
          - "/*/*"

  CoreServiceApi:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./
      Handler: lambda.handler
      MemorySize: 1024
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: nodejs12.x
      Timeout: 30
      Tracing: Active
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          # DB_DATABASE: !Ref DbDatabase
          # DB_HOST: !Ref DbHost
          # DB_PASS: !Ref DbPass
          # DB_USER: !Ref DbUser

  CoreServiceApiDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      RegionalCertificateArn: !Ref DomainCertificateArn
      DomainName: !Sub
        - ${RegionShort}-${BranchIdentifier}-honoru.${DomainName}
        - RegionShort: !FindInMap [RegionMap, !Ref "AWS::Region", Short]
      EndpointConfiguration:
        Types:
          - REGIONAL

  CoreServiceApiMapping:
    Type: AWS::ApiGateway::BasePathMapping
    DependsOn:
    - ApiGatewayApiProdStage
    Properties:
      DomainName: !Ref CoreServiceApiDomainName
      RestApiId: !Ref ApiGatewayApi
      Stage: Prod

  CoreServiceApiDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub ${DomainName}.
      Comment: DNS name for stack ${AWS::StackName}.
      Name: !Ref CoreServiceApiDomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CoreServiceApiDomainName.RegionalDomainName
        HostedZoneId: !GetAtt CoreServiceApiDomainName.RegionalHostedZoneId

Outputs:
  LambdaFunctionConsoleUrl:
    Description: Console URL for the Lambda Function.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/lambda/home?region="
        - !Ref AWS::Region
        - "#/functions/"
        - !Ref CoreServiceApi

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Join
      - ''
      - - https://
        - !Ref AWS::Region
        - ".console.aws.amazon.com/apigateway/home?region="
        - !Ref AWS::Region
        - "#/apis/"
        - !Ref ApiGatewayApi
        - "/stages/prod"

  ApiUrl:
    Description: Invoke URL for your API. Clicking this link will perform a GET request
      on the root resource of your API.
    Value: !Join
      - ''
      - - https://
        - !Ref ApiGatewayApi
        - ".execute-api."
        - !Ref AWS::Region
        - ".amazonaws.com/prod/"
